#!/usr/bin/env node

/**
 * üîç Script de Auditoria de Qualidade de Conte√∫do
 * Analisa automaticamente a documenta√ß√£o e identifica problemas de conte√∫do
 */

const fs = require('fs');
const path = require('path');
require('dotenv').config();

const REPO_OWNER = process.env.REPO_OWNER || 'tatyquebralayout';
const REPO_NAME = process.env.REPO_NAME || 'n8n-Doc-pt-BR';
const DOCS_PATH = path.join(__dirname, '..', 'docs');

// Crit√©rios de qualidade para an√°lise
const QUALITY_CRITERIA = {
  minContentLength: 500, // M√≠nimo de caracteres
  maxContentLength: 10000, // M√°ximo recomendado
  requiredSections: ['## ', '### '], // Deve ter pelo menos 2 n√≠veis de heading
  commonIssues: [
    'Em constru√ß√£o',
    'TODO',
    'FIXME',
    'XXX',
    'em breve',
    'ser√° implementado',
    'falta implementar'
  ],
  brokenPatterns: [
    /\[.*\]\(#\)/g, // Links vazios
    /\[.*\]\(\)/g, // Links vazios
    /!\[.*\]\(\)/g, // Imagens vazias
    /\[.*\]\(http:\/\/\)/g, // Links HTTP inseguros
  ],
  qualityIndicators: [
    'exemplo',
    'tutorial',
    'passo a passo',
    'c√≥digo',
    'screenshot',
    'imagem',
    'v√≠deo'
  ]
};

class ContentAuditor {
  constructor() {
    this.results = {
      totalFiles: 0,
      issues: [],
      recommendations: [],
      statistics: {
        emptyFiles: 0,
        shortContent: 0,
        longContent: 0,
        missingHeadings: 0,
        brokenLinks: 0,
        constructionPages: 0,
        qualityScore: 0
      }
    };
  }

  async auditAllContent() {
    console.log('üîç Iniciando auditoria de qualidade de conte√∫do...\n');
    
    await this.scanDirectory(DOCS_PATH);
    this.calculateQualityScore();
    this.generateRecommendations();
    
    console.log('üìä Auditoria conclu√≠da!\n');
    this.printResults();
    
    return this.results;
  }

  async scanDirectory(dirPath, relativePath = '') {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const itemRelativePath = path.join(relativePath, item);
      
      if (fs.statSync(fullPath).isDirectory()) {
        await this.scanDirectory(fullPath, itemRelativePath);
      } else if (item.endsWith('.md') || item.endsWith('.mdx')) {
        await this.auditFile(fullPath, itemRelativePath);
      }
    }
  }

  async auditFile(filePath, relativePath) {
    this.results.totalFiles++;
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const contentLength = content.length;
      const issues = [];
      
      // 1. Verificar conte√∫do vazio ou muito curto
      if (contentLength === 0) {
        this.results.statistics.emptyFiles++;
        issues.push({
          type: 'empty_file',
          severity: 'high',
          message: 'Arquivo completamente vazio'
        });
      } else if (contentLength < QUALITY_CRITERIA.minContentLength) {
        this.results.statistics.shortContent++;
        issues.push({
          type: 'short_content',
          severity: 'medium',
          message: `Conte√∫do muito curto (${contentLength} caracteres, m√≠nimo recomendado: ${QUALITY_CRITERIA.minContentLength})`
        });
      }
      
      // 2. Verificar conte√∫do muito longo
      if (contentLength > QUALITY_CRITERIA.maxContentLength) {
        this.results.statistics.longContent++;
        issues.push({
          type: 'long_content',
          severity: 'low',
          message: `Conte√∫do muito longo (${contentLength} caracteres, m√°ximo recomendado: ${QUALITY_CRITERIA.maxContentLength})`
        });
      }
      
      // 3. Verificar estrutura de headings
      const hasHeadings = QUALITY_CRITERIA.requiredSections.some(section => content.includes(section));
      if (!hasHeadings && contentLength > QUALITY_CRITERIA.minContentLength) {
        this.results.statistics.missingHeadings++;
        issues.push({
          type: 'missing_headings',
          severity: 'medium',
          message: 'Falta estrutura de headings (##, ###)'
        });
      }
      
      // 4. Verificar indicadores de conte√∫do em constru√ß√£o
      const constructionIndicators = QUALITY_CRITERIA.commonIssues.filter(issue => 
        content.toLowerCase().includes(issue.toLowerCase())
      );
      if (constructionIndicators.length > 0) {
        this.results.statistics.constructionPages++;
        issues.push({
          type: 'under_construction',
          severity: 'high',
          message: `P√°gina em constru√ß√£o: ${constructionIndicators.join(', ')}`
        });
      }
      
      // 5. Verificar links quebrados
      const brokenLinks = [];
      QUALITY_CRITERIA.brokenPatterns.forEach(pattern => {
        const matches = content.match(pattern);
        if (matches) {
          brokenLinks.push(...matches);
        }
      });
      if (brokenLinks.length > 0) {
        this.results.statistics.brokenLinks++;
        issues.push({
          type: 'broken_links',
          severity: 'high',
          message: `Links quebrados encontrados: ${brokenLinks.length}`
        });
      }
      
      // 6. Verificar indicadores de qualidade
      const qualityIndicators = QUALITY_CRITERIA.qualityIndicators.filter(indicator => 
        content.toLowerCase().includes(indicator.toLowerCase())
      );
      const qualityScore = qualityIndicators.length;
      
      if (issues.length > 0) {
        this.results.issues.push({
          file: relativePath,
          path: filePath,
          contentLength,
          qualityScore,
          issues
        });
      }
      
    } catch (error) {
      this.results.issues.push({
        file: relativePath,
        path: filePath,
        issues: [{
          type: 'read_error',
          severity: 'high',
          message: `Erro ao ler arquivo: ${error.message}`
        }]
      });
    }
  }

  calculateQualityScore() {
    const totalFiles = this.results.totalFiles;
    const problemFiles = this.results.issues.length;
    const healthyFiles = totalFiles - problemFiles;
    
    this.results.statistics.qualityScore = Math.round((healthyFiles / totalFiles) * 100);
  }

  generateRecommendations() {
    const stats = this.results.statistics;
    const recommendations = [];
    
    // Recomenda√ß√µes baseadas nos problemas encontrados
    if (stats.emptyFiles > 0) {
      recommendations.push({
        priority: 'high',
        category: 'conte√∫do',
        title: 'Arquivos Vazios',
        description: `${stats.emptyFiles} arquivos est√£o completamente vazios`,
        action: 'Adicionar conte√∫do ou remover arquivos desnecess√°rios'
      });
    }
    
    if (stats.constructionPages > 0) {
      recommendations.push({
        priority: 'high',
        category: 'conte√∫do',
        title: 'P√°ginas em Constru√ß√£o',
        description: `${stats.constructionPages} p√°ginas est√£o marcadas como "em constru√ß√£o"`,
        action: 'Completar conte√∫do ou remover p√°ginas tempor√°rias'
      });
    }
    
    if (stats.shortContent > 0) {
      recommendations.push({
        priority: 'medium',
        category: 'qualidade',
        title: 'Conte√∫do Insuficiente',
        description: `${stats.shortContent} p√°ginas t√™m conte√∫do muito curto`,
        action: 'Expandir conte√∫do com mais detalhes, exemplos e explica√ß√µes'
      });
    }
    
    if (stats.brokenLinks > 0) {
      recommendations.push({
        priority: 'high',
        category: 'navega√ß√£o',
        title: 'Links Quebrados',
        description: `${stats.brokenLinks} arquivos cont√™m links quebrados`,
        action: 'Corrigir ou remover links que n√£o funcionam'
      });
    }
    
    if (stats.missingHeadings > 0) {
      recommendations.push({
        priority: 'medium',
        category: 'estrutura',
        title: 'Estrutura de Headings',
        description: `${stats.missingHeadings} p√°ginas n√£o t√™m estrutura clara de headings`,
        action: 'Adicionar t√≠tulos e subt√≠tulos para melhor organiza√ß√£o'
      });
    }
    
    // Recomenda√ß√µes gerais de qualidade
    if (stats.qualityScore < 70) {
      recommendations.push({
        priority: 'high',
        category: 'geral',
        title: 'Qualidade Geral Baixa',
        description: `Score de qualidade: ${stats.qualityScore}%`,
        action: 'Priorizar revis√£o e melhoria do conte√∫do existente'
      });
    }
    
    this.results.recommendations = recommendations;
  }

  printResults() {
    console.log('üìà **RELAT√ìRIO DE QUALIDADE DE CONTE√öDO**\n');
    
    // Estat√≠sticas gerais
    console.log('üìä **Estat√≠sticas Gerais:**');
    console.log(`   üìÑ Total de arquivos: ${this.results.totalFiles}`);
    console.log(`   ‚ö†Ô∏è  Arquivos com problemas: ${this.results.issues.length}`);
    console.log(`   ‚úÖ Score de qualidade: ${this.results.statistics.qualityScore}%\n`);
    
    // Problemas por categoria
    console.log('üö® **Problemas Encontrados:**');
    console.log(`   üì≠ Arquivos vazios: ${this.results.statistics.emptyFiles}`);
    console.log(`   üìù Conte√∫do insuficiente: ${this.results.statistics.shortContent}`);
    console.log(`   üöß P√°ginas em constru√ß√£o: ${this.results.statistics.constructionPages}`);
    console.log(`   üîó Links quebrados: ${this.results.statistics.brokenLinks}`);
    console.log(`   üìã Sem estrutura de headings: ${this.results.statistics.missingHeadings}\n`);
    
    // Top 10 arquivos com mais problemas
    console.log('üî• **Top 10 Arquivos com Mais Problemas:**');
    const topProblems = this.results.issues
      .sort((a, b) => b.issues.length - a.issues.length)
      .slice(0, 10);
    
    topProblems.forEach((file, index) => {
      console.log(`   ${index + 1}. ${file.file} (${file.issues.length} problemas)`);
      file.issues.forEach(issue => {
        const emoji = issue.severity === 'high' ? 'üî¥' : issue.severity === 'medium' ? 'üü°' : 'üü¢';
        console.log(`      ${emoji} ${issue.message}`);
      });
    });
    
    // Recomenda√ß√µes
    console.log('\nüí° **Recomenda√ß√µes Priorit√°rias:**');
    this.results.recommendations
      .sort((a, b) => {
        const priorityOrder = { high: 3, medium: 2, low: 1 };
        return priorityOrder[b.priority] - priorityOrder[a.priority];
      })
      .forEach((rec, _index) => {
        const emoji = rec.priority === 'high' ? 'üî¥' : rec.priority === 'medium' ? 'üü°' : 'üü¢';
        console.log(`   ${emoji} **${rec.title}** (${rec.category})`);
        console.log(`      ${rec.description}`);
        console.log(`      ‚û°Ô∏è  ${rec.action}\n`);
      });
  }

  async createGitHubIssues() {
    if (!process.env.GITHUB_TOKEN) {
      console.log('‚ö†Ô∏è  GITHUB_TOKEN n√£o encontrado. Pulando cria√ß√£o de issues...');
      return;
    }

    try {
      // Usar import din√¢mico para o Octokit
      const { Octokit } = await import('@octokit/rest');
      const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
      
      console.log('üöÄ Criando issues no GitHub baseadas na auditoria...\n');
      
      // Criar issue principal com relat√≥rio
      const reportBody = this.generateReportMarkdown();
      
      const { data: issue } = await octokit.rest.issues.create({
        owner: REPO_OWNER,
        repo: REPO_NAME,
        title: `üìä Relat√≥rio de Auditoria de Conte√∫do - ${new Date().toISOString().split('T')[0]}`,
        body: reportBody,
        labels: ['üìù Documenta√ß√£o', 'üîç Auditoria', 'üìä Relat√≥rio']
      });
      
      console.log(`‚úÖ Issue principal criada: ${issue.html_url}`);
      
      // Criar issues espec√≠ficas para problemas cr√≠ticos
      const criticalIssues = this.results.recommendations.filter(rec => rec.priority === 'high');
      
      for (const rec of criticalIssues) {
        const issueBody = this.generateIssueBody(rec);
        
        try {
          const { data: specificIssue } = await octokit.rest.issues.create({
            owner: REPO_OWNER,
            repo: REPO_NAME,
            title: `üî¥ [CR√çTICO] ${rec.title}`,
            body: issueBody,
            labels: ['üìù Documenta√ß√£o', 'üî¥ Cr√≠tica', 'üîß Manuten√ß√£o']
          });
          
          console.log(`‚úÖ Issue espec√≠fica criada: ${specificIssue.html_url}`);
        } catch (error) {
          console.log(`‚ùå Erro ao criar issue para ${rec.title}: ${error.message}`);
        }
      }
      
    } catch (error) {
      console.log(`‚ùå Erro ao criar issues: ${error.message}`);
    }
  }

  generateReportMarkdown() {
    return `# üìä Relat√≥rio de Auditoria de Conte√∫do

## üìà Estat√≠sticas Gerais
- **Total de arquivos:** ${this.results.totalFiles}
- **Arquivos com problemas:** ${this.results.issues.length}
- **Score de qualidade:** ${this.results.statistics.qualityScore}%

## üö® Problemas Encontrados
- üì≠ **Arquivos vazios:** ${this.results.statistics.emptyFiles}
- üìù **Conte√∫do insuficiente:** ${this.results.statistics.shortContent}
- üöß **P√°ginas em constru√ß√£o:** ${this.results.statistics.constructionPages}
- üîó **Links quebrados:** ${this.results.statistics.brokenLinks}
- üìã **Sem estrutura de headings:** ${this.results.statistics.missingHeadings}

## üí° Recomenda√ß√µes Priorit√°rias
${this.results.recommendations.map(rec => `
### ${rec.priority === 'high' ? 'üî¥' : rec.priority === 'medium' ? 'üü°' : 'üü¢'} ${rec.title}
**Categoria:** ${rec.category}
**Descri√ß√£o:** ${rec.description}
**A√ß√£o:** ${rec.action}
`).join('\n')}

## üìã Arquivos com Mais Problemas
${this.results.issues.slice(0, 10).map((file, index) => `
${index + 1}. **${file.file}** (${file.issues.length} problemas)
${file.issues.map(issue => `   - ${issue.severity === 'high' ? 'üî¥' : issue.severity === 'medium' ? 'üü°' : 'üü¢'} ${issue.message}`).join('\n')}
`).join('\n')}

---
*Relat√≥rio gerado automaticamente em ${new Date().toLocaleString('pt-BR')}*`;
  }

  generateIssueBody(recommendation) {
    return `## üéØ Problema
${recommendation.description}

## üìã A√ß√£o Necess√°ria
${recommendation.action}

## üìä Contexto
- **Categoria:** ${recommendation.category}
- **Prioridade:** ${recommendation.priority}
- **Identificado em:** ${new Date().toLocaleDateString('pt-BR')}

## ‚úÖ Crit√©rios de Aceita√ß√£o
- [ ] Problema identificado e documentado
- [ ] Solu√ß√£o implementada
- [ ] Qualidade verificada
- [ ] Documenta√ß√£o atualizada

## üîó Refer√™ncias
- Relat√≥rio completo de auditoria
- Guia de qualidade de conte√∫do
- Padr√µes da documenta√ß√£o`;
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    const auditor = new ContentAuditor();
    await auditor.auditAllContent();
    
    // Perguntar se deve criar issues
    if (process.argv.includes('--create-issues')) {
      await auditor.createGitHubIssues();
    } else {
      console.log('\nüí° Para criar issues automaticamente, execute:');
      console.log('   node scripts/audit-content-quality.js --create-issues');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante auditoria:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { ContentAuditor };
