#!/usr/bin/env node

/**
 * Script para corrigir problemas de Unicode em matem√°tica
 * Remove caracteres Unicode problem√°ticos de express√µes matem√°ticas
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Caracteres Unicode problem√°ticos e suas substitui√ß√µes
const unicodeReplacements = {
  '‚îú¬¨': 'e', // √´
  '‚îú√∫': 'a', // √£
  '‚îú‚îÇ': 'o', // √µ
  '‚îú¬∫': 'u', // √π
  '‚îú√Å': 'A', // √Å
  '‚îú√≠': 'a', // √°
  '√î√á√¥': '-', // en dash
  '√î√á√≥': '-', // em dash
  '√î√á√∂': '"', // smart quote
  '√î√á¬£': '"', // smart quote
  '√î√á√ò': '"', // smart quote
  '√î√á√ñ': "'", // smart quote
  '√î√á√ñ': "'", // smart quote
};

// Fun√ß√£o para corrigir texto Unicode
function fixUnicodeText(text) {
  let fixedText = text;
  
  // Substituir caracteres Unicode problem√°ticos
  Object.entries(unicodeReplacements).forEach(([unicode, replacement]) => {
    const regex = new RegExp(unicode, 'g');
    fixedText = fixedText.replace(regex, replacement);
  });
  
  return fixedText;
}

// Fun√ß√£o para processar express√µes matem√°ticas
function fixMathExpressions(content) {
  // Encontrar express√µes matem√°ticas inline ($...$)
  content = content.replace(/\$([^$]+)\$/g, (match, mathContent) => {
    const fixedMath = fixUnicodeText(mathContent);
    return `$${fixedMath}$`;
  });
  
  // Encontrar express√µes matem√°ticas de bloco ($$...$$)
  content = content.replace(/\$\$([^$]+)\$\$/g, (match, mathContent) => {
    const fixedMath = fixUnicodeText(mathContent);
    return `$$${fixedMath}$$`;
  });
  
  return content;
}

// Fun√ß√£o para processar um arquivo
function processFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    const fixedContent = fixMathExpressions(content);
    
    if (originalContent !== fixedContent) {
      fs.writeFileSync(filePath, fixedContent, 'utf8');
      console.log(`‚úÖ Corrigido: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå Erro ao processar ${filePath}:`, error.message);
    return false;
  }
}

// Fun√ß√£o principal
function main() {
  console.log('üîß Corrigindo problemas de Unicode em matem√°tica...\n');
  
  // Encontrar todos os arquivos MDX
  const mdxFiles = glob.sync('docs/**/*.mdx');
  const mdFiles = glob.sync('docs/**/*.md');
  const allFiles = [...mdxFiles, ...mdFiles];
  
  let totalFiles = 0;
  let fixedFiles = 0;
  
  allFiles.forEach(filePath => {
    totalFiles++;
    if (processFile(filePath)) {
      fixedFiles++;
    }
  });
  
  console.log(`\nüìä Resumo:`);
  console.log(`- Arquivos processados: ${totalFiles}`);
  console.log(`- Arquivos corrigidos: ${fixedFiles}`);
  console.log(`- Arquivos sem problemas: ${totalFiles - fixedFiles}`);
  
  if (fixedFiles > 0) {
    console.log('\n‚úÖ Corre√ß√µes aplicadas com sucesso!');
  } else {
    console.log('\n‚ÑπÔ∏è Nenhum problema de Unicode encontrado.');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  fixUnicodeText,
  fixMathExpressions,
  processFile
}; 