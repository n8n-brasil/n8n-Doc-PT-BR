name: Testes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test-unit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Cache test results
      uses: actions/cache@v3
      with:
        path: |
          coverage/
          .nyc_output/
        key: ${{ runner.os }}-test-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-test-
    
    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  test-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Build the site
      run: npm run build
    
    - name: Start the site
      run: npm run serve &
    
    - name: Wait for the site to be ready
      run: npx wait-on http://localhost:3000
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: test-results/
        retention-days: 30

  test-accessibility:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Build the site
      run: npm run build
    
    - name: Start the site
      run: npm run serve &
    
    - name: Wait for the site to be ready
      run: npx wait-on http://localhost:3000
    
    - name: Run accessibility tests
      run: npm run test:e2e -- --grep @accessibility || echo "Testes de acessibilidade não disponíveis"
    
    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results
        path: test-results/
        retention-days: 30

  test-performance:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Build the site
      run: npm run build
    
    - name: Start the site
      run: npm run serve &
    
    - name: Wait for the site to be ready
      run: npx wait-on http://localhost:3000
    
    - name: Run performance tests
      run: npm run test:e2e -- --grep @performance || echo "Testes de performance não disponíveis"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: test-results/
        retention-days: 30

  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run linting
      run: npm run lint:check
      continue-on-error: true
    
    - name: Run type checking
      run: npm run typecheck
      continue-on-error: true
    
    - name: Run SEO check
      run: npm run check-seo
      continue-on-error: true
    
    - name: Run spell check
      run: npm run spell-check
      continue-on-error: true
    
    - name: Run format check
      run: npm run format-check
      continue-on-error: true
    
    - name: Check for broken links
      run: npm run check-broken-links
      continue-on-error: true
    
    - name: Check for duplicate routes
      run: npm run check-duplicate-routes
      continue-on-error: true

  test-report:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-unit, test-e2e, test-accessibility, test-performance, quality-check]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/
    
    - name: Generate test report
      run: node scripts/run-tests.js
      continue-on-error: true
    
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-results/test-report.json
        retention-days: 30
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportPath = 'test-results/test-report.json';
          
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            const { summary } = report;
            
            const comment = `## 📊 Relatório de Testes
            
            **Resumo:**
            - ✅ Passou: ${summary.passed}
            - ❌ Falhou: ${summary.failed}
            - 📈 Taxa de sucesso: ${((summary.passed / summary.total) * 100).toFixed(1)}%
            
            **Detalhes:**
            ${Object.entries(report.details).map(([name, result]) => 
              `- ${name}: ${result.success ? '✅' : '❌'}`
            ).join('\n')}
            
            📋 Relatórios completos disponíveis nos artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } 