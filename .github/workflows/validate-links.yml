name: Validate Documentation Links

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'sidebars*.ts'
      - 'sidebars*.json'
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'
  schedule:
    # Executa toda segunda-feira às 9h UTC (6h BRT)
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  validate-links:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build documentation
        run: npm run build
        continue-on-error: true
        env:
          GSC_VERIFICATION_CODE: ${{ secrets.GSC_VERIFICATION_CODE }}
        
      - name: Check internal links
        run: npm run check-broken-links
        continue-on-error: true
        
      - name: Check for broken anchors
        run: npm run check-broken-anchors
        continue-on-error: true
        
      - name: Validate external links
        uses: lycheeverse/lychee-action@v2
        with:
          args: --verbose --no-progress --exclude-all-private docs/**/*.md docs/**/*.mdx
          fail: false
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          
      - name: Generate link validation report
        run: |
          echo "# 🔗 Relatório de Validação de Links" > link-report.md
          echo "" >> link-report.md
          echo "**Data:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> link-report.md
          echo "" >> link-report.md
          
          if [ -f "overlap-report.json" ]; then
            echo "## 📊 Estatísticas de Links" >> link-report.md
            echo "" >> link-report.md
            node -e "
              const report = require('./overlap-report.json');
              console.log(\`- Links quebrados encontrados: \${report.stats.brokenLinks || 0}\`);
              console.log(\`- Arquivos analisados: \${report.stats.filesScanned || 0}\`);
              console.log(\`- Total de problemas: \${report.summary.totalIssues || 0}\`);
            " >> link-report.md
            echo "" >> link-report.md
          fi
          
          if [ -f "lychee/out.md" ]; then
            echo "## 🌐 Links Externos" >> link-report.md
            echo "" >> link-report.md
            cat lychee/out.md >> link-report.md
          fi
          
      - name: Upload link validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: link-validation-report
          path: |
            link-report.md
            overlap-report.json
            lychee/
          retention-days: 30
          
      - name: Comment PR with link validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = `## 🔗 Relatório de Validação de Links\n\n`;
            
            try {
              // Ler relatório de overlaps para estatísticas de links internos
              if (fs.existsSync('overlap-report.json')) {
                const report = JSON.parse(fs.readFileSync('overlap-report.json', 'utf8'));
                
                comment += `### 🔍 Links Internos\n`;
                comment += `- **Links quebrados:** ${report.stats.brokenLinks || 0}\n`;
                comment += `- **Arquivos analisados:** ${report.stats.filesScanned || 0}\n`;
                comment += `- **Status:** ${report.stats.brokenLinks === 0 ? '✅ Todos os links funcionando' : '⚠️ Links quebrados encontrados'}\n\n`;
                
                if (report.stats.brokenLinks > 0) {
                  comment += `### 🚨 Links Quebrados Encontrados\n`;
                  const brokenLinkIssues = report.issues.filter(issue => issue.type === 'BROKEN_LINK').slice(0, 5);
                  brokenLinkIssues.forEach(issue => {
                    comment += `- ${issue.message}\n`;
                  });
                  if (report.issues.filter(issue => issue.type === 'BROKEN_LINK').length > 5) {
                    comment += `\n*... e mais ${report.issues.filter(issue => issue.type === 'BROKEN_LINK').length - 5} links quebrados.*\n`;
                  }
                  comment += `\n`;
                }
              }
              
              // Adicionar informações sobre links externos se disponível
              if (fs.existsSync('lychee/out.md')) {
                comment += `### 🌐 Links Externos\n`;
                comment += `Verificação de links externos concluída. Veja o relatório completo nos artifacts.\n\n`;
              }
              
              comment += `📄 [Relatório completo disponível nos artifacts](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
              
            } catch (error) {
              console.error('Erro ao processar relatório de links:', error);
              comment += `❌ Erro ao processar relatório de links. Verifique os logs da action.\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Create issue for broken links (scheduled run only)
        if: github.event_name == 'schedule' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('overlap-report.json')) {
                const report = JSON.parse(fs.readFileSync('overlap-report.json', 'utf8'));
                
                if (report.stats.brokenLinks > 0) {
                  const issueTitle = `🔗 Links quebrados detectados - ${new Date().toISOString().split('T')[0]}`;
                  
                  let issueBody = `## 🚨 Links Quebrados Detectados\n\n`;
                  issueBody += `**Data:** ${new Date().toUTCString()}\n`;
                  issueBody += `**Total de links quebrados:** ${report.stats.brokenLinks}\n\n`;
                  
                  issueBody += `### 📝 Problemas Encontrados\n\n`;
                  const brokenLinkIssues = report.issues.filter(issue => issue.type === 'BROKEN_LINK').slice(0, 10);
                  brokenLinkIssues.forEach((issue, index) => {
                    issueBody += `${index + 1}. ${issue.message}\n`;
                  });
                  
                  if (report.issues.filter(issue => issue.type === 'BROKEN_LINK').length > 10) {
                    issueBody += `\n*... e mais ${report.issues.filter(issue => issue.type === 'BROKEN_LINK').length - 10} problemas.*\n`;
                  }
                  
                  issueBody += `\n### 🔧 Ação Necessária\n\n`;
                  issueBody += `- [ ] Revisar e corrigir os links quebrados listados acima\n`;
                  issueBody += `- [ ] Verificar se os arquivos de destino existem\n`;
                  issueBody += `- [ ] Atualizar caminhos relativos se necessário\n`;
                  issueBody += `- [ ] Executar \`npm run check-broken-links\` localmente para verificar\n\n`;
                  
                  issueBody += `📄 [Relatório completo](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
                  
                  // Verificar se já existe uma issue similar aberta
                  const existingIssues = await github.rest.issues.listForRepo({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    state: 'open',
                    labels: 'broken-links,automated'
                  });
                  
                  if (existingIssues.data.length === 0) {
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: issueTitle,
                      body: issueBody,
                      labels: ['broken-links', 'automated', 'documentation']
                    });
                  }
                }
              }
            } catch (error) {
              console.error('Erro ao criar issue para links quebrados:', error);
            }